#!/usr/bin/env python

# DIRT.
#
# Andy Mastbaum (amastbaum@gmail.com), August 2011


import signal
import sys
if sys.path[0] == '':
    sys.path.insert(1, '.')
else:
    sys.path.insert(0, '.')

def help():
    '''print help message'''
    print \
'''Usage:

  dirt serve
  - Run the dirt remote execution server, which will dole out unfinished tasks
    in the database to available execution hosts.

  dirt updatenodes [host1] [host2] ...
  - Update stored system information on each host, adding the host to the
    database if necessary.

  dirt create [project name] [db name (optional)]
  - Create the skeleton directory structure for a new dirt project.
'''

def signal_handler(signal, frame):
    '''handle SIGINTs gracefully'''
    import settings
    from core.log import log
    log.write('Caught SIGINT (Ctrl-C), Exiting.')
    sys.exit(0)

def serve_forever():
    '''when new tasks show up in the database, pair them up with the next
    available node for execution.
    '''
    import settings
    from core.log import log
    from core import helpers
    from core import load_balance
    from core import dbi
    signal.signal(signal.SIGINT, signal_handler)
    log.write('dirt is running...')

    db = dbi.DirtCouchDB(settings.couchdb_host, settings.couchdb_dbname)
    nodes = load_balance.round_robin(db)
    tasks = db.get_tasks()

    for id in tasks:
        task_executed = False
        while not task_executed:
            node = nodes.next()
            log.write('%s -> %s' % (id, node['fqdn']))
            task_executed = helpers.remote_execute(db, node, id)

def updatenodes(nodes):
    '''update or add all hosts in list ``nodes`` in database host list'''
    import settings
    from core.log import log
    from core import dbi
    from core import helpers
    db = dbi.DirtCouchDB(settings.couchdb_host, settings.couchdb_dbname)
    if len(nodes) == 0:
        help()
        sys.exit(1)
    helpers.node_recon(nodes, db)

if __name__ == '__main__':
    print 'dirt v0.1'

    if len(sys.argv) < 2:
        help()
        sys.exit(1)

    if sys.argv[1] == 'serve':
        serve_forever()
    elif sys.argv[1] == 'updatenodes':
        updatenodes(nodes = sys.argv[2:])
    elif sys.argv[1] == 'create':
        from core.create import create
        if len(sys.argv) == 3:
            create(sys.argv[2], sys.argv[2])
        elif len(sys.argv) == 4:
            create(sys.argv[2], sys.argv[3])
        else:
            help()
            sys.exit(1)
    else:
        help()
        sys.exit(0)

