#!/usr/bin/env python

# DIRT.
#
# Andy Mastbaum (amastbaum@gmail.com), August 2011

import sys
import signal

def help():
    print \
'''Usage:

  dirt serve
  - Run the dirt remote execution server, which will dole out unfinished tasks
    in the database to available execution hosts.

  dirt updatenodes [host1] [host2] ...
  - Update stored system information on each host, adding the host to the
    database if necessary.
'''

def signal_handler(signal, frame):
    print 'Caught SIGINT (Ctrl-C), Exiting.'
    # do something smart
    sys.exit(0)

def serve_forever():
    import couchdb
    import core.helpers
    import core.load_balance
    signal.signal(signal.SIGINT, signal_handler)
    print 'dirt is running...'

    # get outstanding tasks and available nodes
    db = core.helpers.connect_to_db()
    tasks = core.helpers.get_available_tasks(db)
    nodes = core.load_balance.round_robin(db)


    # event loop
    # changes eventually "runs out" despite being in continuous mode.
    # wrap in an infinite loop?
    last_seq = 0
    while True:
        # subscribe to changes feed. continuous mode makes a generator
        # need to filter this for records
        changes = db.changes(feed='continuous', since=last_seq)
        for change in changes:
            print change
            try:
                last_seq = change['seq']
            except KeyError:
                try:
                    last_seq = change['last_seq']
                except KeyError:
                    print 'dirt: Unexpected document in change feed'
            try:
                id = change['id']
                if db[id]['type'] == 'record':
                    for task in db[id]['tasks']:
                        print id, ':', task['name'], '->', nodes.next()['hostname']
                    sys.stdout.flush()
            except KeyError:
                continue
            except couchdb.http.ResourceNotFound:
                continue
        print 'dirt: changes last_seq', last_seq

if __name__ == '__main__':
    if len(sys.argv) < 2:
        help()
        sys.exit(1)

    if sys.argv[1] == 'serve':
        serve_forever()
    elif sys.argv[1] == 'updatenodes':
        import core.helpers
        nodes = sys.argv[2:]
        if len(nodes) == 0:
            help()
            sys.exit(1)
        core.helpers.node_recon(nodes, core.helpers.connect_to_db())

